{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/decimal.js@10.4.3/node_modules/decimal.js/decimal.mjs","../src/index.ts"],"sourcesContent":["/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import Decimal from 'decimal.js';\r\n\r\nexport default {\r\n  /**\r\n   * 加法运算\r\n   * @param a 运算数1\r\n   * @param b 运算数2\r\n   */\r\n  add: function (a: number | string, b: number | string): number {\r\n    return new Decimal(a).add(new Decimal(b)).toNumber();\r\n  },\r\n  /**\r\n   * 减法运算\r\n   * @param a 运算数1\r\n   * @param b 运算数2\r\n   */\r\n  subtract: function (a: number | string, b: number | string): number {\r\n    return new Decimal(a).sub(new Decimal(b)).toNumber();\r\n  },\r\n  /**\r\n   * 乘法运算\r\n   * @param a 运算数1\r\n   * @param b 运算数2\r\n   */\r\n  multiply: function (a: number | string, b: number | string): number {\r\n    return new Decimal(a).mul(new Decimal(b)).toNumber();\r\n  },\r\n  /**\r\n   * 除法运算\r\n   * @param a 运算数1\r\n   * @param b 运算数2\r\n   */\r\n  divide: function (a: number | string, b: number | string): number {\r\n    return new Decimal(a).div(new Decimal(b)).toNumber();\r\n  }\r\n};\r\n"],"names":["EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","inexact","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","mathpow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","PI_PRECISION","P","x","finalise","min","max","k","Ctor","y","j","xdL","ydL","xd","yd","xs","ys","pr","rm","cosine","toLessThanHalfPi","m","rep","sd","t","t3","t3plusx","digitsToString","divide","w","d","n","len","one","tinyPow","taylorSeries","cosh2_x","i","d8","sinh2_x","d5","d16","d20","halfPi","getPi","wpr","xsd","px","r","x2","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","e","xe","xLTy","getBase10Exponent","q","naturalExponential","carry","z","getPrecision","sine","s","rL","toStringBinary","dp","checkInt32","str","finiteToString","maxD","d0","d1","d2","n0","n1","yn","intPow","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","cmp","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","pow","sum","c","c0","numerator","x1","parseDecimal","parseOther","divisor","isFloat","p","Decimal","sin2_x","isHyperbolic","isNeg","pi","abs","acos","acosh","add","asin","asinh","atan","atanh","atan2","cbrt","ceil","clamp","config","obj","v","useDefaults","ps","cos","cosh","clone","isDecimalInstance","div","exp","floor","hypot","ln","log","log10","log2","mod","mul","random","round","sin","sinh","sqrt","sub","tan","tanh","trunc","index"],"mappings":"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"}